---
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

deploymentAnnotations: {}
podExtraLabels: {}

service:
  enabled: true
  type: ClusterIP
  ports:
    - port: 26656
      targetPort: 26656
      protocol: TCP
      name: peer
    - port: 26657
      targetPort: 26657
      protocol: TCP
      name: rpc
    - port: 9790
      targetPort: 9790
      protocol: TCP
      name: grpc
    - port: 1717
      targetPort: 1717
      protocol: TCP
      name: api

livenessProbe:
  httpGet:
    path: /health
    port: 26657
  initialDelaySeconds: 10
  periodSeconds: 90
readinessProbe:
  httpGet:
    path: /health
    port: 26657
  initialDelaySeconds: 5
  periodSeconds: 5
  failureThreshold: 100

serviceMonitor:
  # -- Create ServiceMonitor resource(s) for scraping metrics using PrometheusOperator
  enabled: false
  # -- The namespace in which the ServiceMonitor will be created
  namespace: ""
  # -- The interval at which metrics should be scraped
  interval: 30s
  # -- The timeout after which the scrape is ended
  scrapeTimeout: ""
  # -- Metrics RelabelConfigs to apply to samples before scraping.
  relabellings: []
  # -- Metrics RelabelConfigs to apply to samples before ingestion.
  metricRelabelings: []
  # -- Specify honorLabels parameter to add the scrape endpoint
  honorLabels: false
  # -- Additional labels that can be used so ServiceMonitor resource(s) can be discovered by Prometheus
  additionalLabels: {}
  
imagePullSecrets: []

nodeSelector: {}
tolerations: []
affinity: {}

images:
  init_zenrock: "alpine:3.20.2"
  cosmovisor: "alpine:3.20.2"
  sidecar: "alpine:3.20.2"

# Sidecar enables AVS
sidecar:
  enabled: false
  version: "5.3.8"
  releases_url: "https://github.com/Zenrock-Foundation/zrchain/releases/download"
  env:
    SIDECAR_CONFIG_FILE: "/root-data/sidecar/config.yaml"
  # Read config from a secret, the subpath should be named `config.yaml`
  configFromSecret: ""
  # If configFromSecret is set `config` is ignored
  config: |
    grpc_port: 9191
    state_file: "cache.json"
    operator_config: "/root-data/sidecar/eigen_operator_config.yaml"
    network: "testnet"
    eth_oracle:
      rpc:
        local: "http://127.0.0.1:8545"
        testnet: "TESTNET RPC..."
        mainnet: "MAINNET RPC..."
      contract_addrs:
        service_manager: "0x3AD648DfE0a6D80745ab2Ec97CB67c56bfBEc032"
        price_feed: "0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419"
        network_name: "Hole≈°ky Ethereum Testnet"
    solana_rpc:
      testnet: "https://api.testnet.solana.com"
      mainnet: ""
    proxy_rpc:
      url: ""
      user: ""
      password: ""
    neutrino:
      path: "/root-data/neutrino"
  eigen_operator:
    production: true
    keysFromSecret: "eigen-keys"
    aggregator_address: localhost:8090
    enable_metrics: true
    metrics_address: localhost:9292
    enable_node_api: true
    node_api_address: localhost:9010
    register_on_startup: true
    eth_rpc_url: http://localhost:8545
    eth_ws_url: ws://localhost:8545
    avs_registry_coordinator_address: 0xFbB0cbF0d14C8BaE1f36Cd4Dff792ca412b72Af0
    operator_state_retriever_address: 0xe7FDe0EFCECBbcC25F326EdC80E6B79c1482dAaB
    # Derived address from the ECDSA pub key for ethereum
    operator_address: ""
    # zenvaloper address of your validator
    operator_validator_address: ""
    token_strategy_addr: 0x80528D6e9A2BAbFc766965E0E26d5aB08D9CFaF9

cosmovisor:
  version: "v1.6.0"
  releases_url: "https://github.com/cosmos/cosmos-sdk/releases/download"
  env:
    DAEMON_HOME: "/root-data"
    DAEMON_NAME: "zenrockd"
    DAEMON_ALLOW_DOWNLOAD_BINARIES: true
    DAEMON_DOWNLOAD_MUST_HAVE_CHECKSUM: false
    DAEMON_RESTART_AFTER_UPGRADE: true
    DAEMON_RESTART_DELAY: "5s"
    DAEMON_SHUTDOWN_GRACE: "5s"
    DAEMON_POLL_INTERVAL: "5s"
    DAEMON_DATA_BACKUP_DIR: ""
    UNSAFE_SKIP_BACKUP: true
    DAEMON_PREUPGRADE_MAX_RETRIES: 0
    COSMOVISOR_DISABLE_LOGS: false
    COSMOVISOR_COLOR_LOGS: true
    COSMOVISOR_TIMEFORMAT_LOGS: "kitchen"
    COSMOVISOR_CUSTOM_PREUPGRADE: ""
    COSMOVISOR_DISABLE_RECASE: false

zenrock:
  # Binary version at genesis time
  genesis_version: "5.3.8"
  releases_url: "https://github.com/Zenrock-Foundation/zrchain/releases/download"
  # It expects an RPC endpoint to query the genesis.json file
  genesis_url: "https://rpc.gardia.zenrocklabs.io/genesis"
  genesis_s3:
    enabled: false
    bucket_name: "zenrock-testnet-genesis"
  # Secret with the subpath for:
  #   - priv_validator_key.json
  #   - node_key.json
  nodeKeyFromSecret: ""
  chain_id: "gardia-3"
  # Start node from latest snapshot
  snapshot:
    enabled: false
    url: ""
  metrics:
    enabled: true
  config:
    # app.toml
    minimum_gas_prices: "0urock"
    # default: the last 362880 states are kept, pruning at 10 block intervals
    # nothing: all historic states will be saved, nothing will be deleted (i.e. archiving node)
    # everything: 2 latest states will be kept; pruning at 10 block intervals.
    # custom: allow pruning options to be manually specified through 'pruning-keep-recent', and 'pruning-interval'
    pruning: "nothing"
    # these are applied if and only if the pruning strategy is custom.
    pruning_keep_recent: "100000"
    pruning_interval: "100"
    # config.toml
    moniker: "moniker"
    persistent_peers: ""
    private_peers: ""
    unconditional_peer_ids: ""
    external_address: ""
    allow_duplicate_ip: true
    pex: true
    create_empty_blocks: false
    create_empty_blocks_interval: "0s"
    timeout_commit: "5s"
    log_format: "plain"
    log_level: "info"
    statesync_enabled: false
    statesync_rpc_servers: ""
    statesync_trust_height: 0
    statesync_trust_hash: ""
    statesync_trust_period: "168h0m0s"
    p2p_send_rate: 5120000
    p2p_recv_rate: 5120000
    max_num_inbound_peers: 50
    max_num_outbound_peers: 20
  env: {}
  configMapEnv: []
  resources:
    requests:
      cpu: 500m
      memory: 1024Mi
    limits:
      cpu: 1500m
      memory: 2048Mi
  persistence:
    enabled: true
    existingClaim: false
    claimName: ""
    # storageClass and size are only used when existingClaim is false
    storageClass: ""
    size: "10Gi"
